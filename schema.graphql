enum BlockStatusFilter {
  ALL
  PENDING
  CANONICAL
}

input EventFilterOptionsInput {
  address: String!
  tokenId: String
  status: BlockStatusFilter
  to: Int
  from: Int
}

input ActionFilterOptionsInput {
  address: String!
  tokenId: String
  status: BlockStatusFilter
  to: Int
  from: Int
  fromActionState: String
  endActionState: String
}

type EventData {
  transactionInfo: TransactionInfo
  data: [String]!
}

type ActionData {
  accountUpdateId: String!
  transactionInfo: TransactionInfo
  data: [String]!
}

type BlockInfo {
  height: Int!
  stateHash: String!
  parentHash: String!
  ledgerHash: String!
  chainStatus: String!
  timestamp: String!
  globalSlotSinceHardfork: Int!
  globalSlotSinceGenesis: Int!
  distanceFromMaxBlockHeight: Int!
}

type TransactionInfo {
  status: String!
  hash: String!
  memo: String!
  authorizationKind: String!
}

type ActionStates {
  actionStateOne: String
  actionStateTwo: String
  actionStateThree: String
  actionStateFour: String
  actionStateFive: String
}

type EventOutput {
  blockInfo: BlockInfo
  eventData: [EventData]
}

type ActionOutput {
  blockInfo: BlockInfo
  transactionInfo: TransactionInfo
  actionData: [ActionData]
  actionState: ActionStates!
}

type Query {
  events(input: EventFilterOptionsInput!): [EventOutput]!
  actions(input: ActionFilterOptionsInput!): [ActionOutput]!
}
