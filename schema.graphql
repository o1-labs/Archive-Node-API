"""
Filter for the consensus status of the block
"""
enum BlockStatusFilter {
  """
  All blocks
  """
  ALL
  """
  Only pending blocks
  """
  PENDING
  """
  Only canonical (finalized) blocks
  """
  CANONICAL
}

"""
Filter events from a specific account

**WARNING**: The graphQL schema server will limit the block scan range to a fixed number of blocks.  The default is 10,000 blocks, but can be changed by the host.
It is the responsibility of the client to use a block range that is within the limit, which will guarantee that all events are eventually returned.  It is possible to get a partial result if you do not specify both a `from` and a `to` parameter.
"""
input EventFilterOptionsInput {
  address: String!
  tokenId: String
  status: BlockStatusFilter
  """
  Mina block height to filter events to, exclusive
  """
  to: Int
  """
  Mina block height to filter events from, inclusive
  """
  from: Int
}

"""
Filter actions from a specific account

**WARNING**: The graphQL schema server will limit the block scan range to a fixed number of blocks.  The default is 10,000 blocks, but can be changed by the host.
It is the responsibility of the client to use a block range that is within the limit, which will guarantee that all actions are eventually returned.  It is possible to get a partial result if you do not specify both a `from` and a `to` parameter.
"""
input ActionFilterOptionsInput {
  address: String!
  tokenId: String
  status: BlockStatusFilter
  """
  Mina block height to filter actions to, exclusive
  """
  to: Int
  """
  Mina block height to filter actions from, inclusive
  """
  from: Int
  """
  Filter for actions that happened after this action state, inclusive
  """
  fromActionState: String
  """
  Filter for actions that happened before this action state, inclusive
  """
  endActionState: String
}

type EventData {
  accountUpdateId: String!
  transactionInfo: TransactionInfo
  data: [String]!
}

type ActionData {
  accountUpdateId: String!
  transactionInfo: TransactionInfo
  data: [String]!
}

type BlockInfo {
  height: Int!
  stateHash: String!
  parentHash: String!
  ledgerHash: String!
  chainStatus: String!
  timestamp: String!
  globalSlotSinceHardfork: Int!
  globalSlotSinceGenesis: Int!
  distanceFromMaxBlockHeight: Int!
}

type MaxBlockHeightInfo {
  canonicalMaxBlockHeight: Int!
  pendingMaxBlockHeight: Int!
}

type TransactionInfo {
  status: String!
  hash: String!
  memo: String!
  authorizationKind: String!
  sequenceNumber: Int!
  zkappAccountUpdateIds: [Int]!
}

type ActionStates {
  actionStateOne: String
  actionStateTwo: String
  actionStateThree: String
  actionStateFour: String
  actionStateFive: String
}

type EventOutput {
  blockInfo: BlockInfo
  eventData: [EventData]
}

type ActionOutput {
  blockInfo: BlockInfo
  transactionInfo: TransactionInfo
  actionData: [ActionData]
  actionState: ActionStates!
}

"""
Metadata about the network
"""
type NetworkStateOutput {
  """
  Returns the latest pending and canonical block heights that are synced by the archive node.  If the archive node is not fully synced, the pending block height will be lower than the actual network state.  Wait some time for the archive node to get back in sync.
  """
  maxBlockHeight: MaxBlockHeightInfo
}

type Query {
  events(input: EventFilterOptionsInput!): [EventOutput]!
  actions(input: ActionFilterOptionsInput!): [ActionOutput]!
  networkState: NetworkStateOutput!
}
